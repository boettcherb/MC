#include "BlockInfo.h"
#include "Constants.h"
#include <sglm/sglm.h>
#include <cassert>
#include <cstdlib>
#include <cstring>

//
// A vertex is represented by 1 32-bit unsigned integer:
// light val  (2 bits): 00110000000000000000000000000000
// x position (5 bits): 00001111100000000000000000000000
// y position (8 bits): 00000000011111111000000000000000
// z position (5 bits): 00000000000000000111110000000000
// x texcoord (5 bits): 00000000000000000000001111100000
// y texcoord (5 bits): 00000000000000000000000000011111
//
// The light value is an index into an array of values from 0 to 1 that
// represent the intensity of light hitting the block face. 1 is full
// brightness and 0 is full darkness (array is defined in vertex shader).
// 
// The x and z positions are values from 0 to 16 and the y position is a value
// from 0 to 128. These represent the position of the vertex within a chunk.
//
// The texture coordinates also range from 0 to 16. The vertex shader divides
// these values by 16 and the results (floats from 0 to 1) determine where in
// the texture to sample from. (0, 0) is bottom left and (1, 1) is top right.
//

namespace Block {

    static inline constexpr unsigned int GRASS_BLOCK_DATA[] = {
    //   light  posX   posY    posZ  texX  texY
        0b0010'00001'00000000'00001'00000'01111, // right (+x)
        0b0010'00001'00000000'00000'00001'01111,
        0b0010'00001'00000001'00000'00001'10000,
        0b0010'00001'00000001'00000'00001'10000,
        0b0010'00001'00000001'00001'00000'10000,
        0b0010'00001'00000000'00001'00000'01111,

        0b0010'00000'00000000'00000'00000'01111, // left (-x)
        0b0010'00000'00000000'00001'00001'01111,
        0b0010'00000'00000001'00001'00001'10000,
        0b0010'00000'00000001'00001'00001'10000,
        0b0010'00000'00000001'00000'00000'10000,
        0b0010'00000'00000000'00000'00000'01111,

        0b0001'00000'00000000'00001'00000'01111, // front (+z)
        0b0001'00001'00000000'00001'00001'01111,
        0b0001'00001'00000001'00001'00001'10000,
        0b0001'00001'00000001'00001'00001'10000,
        0b0001'00000'00000001'00001'00000'10000,
        0b0001'00000'00000000'00001'00000'01111,

        0b0001'00001'00000000'00000'00000'01111, // back (-z)
        0b0001'00000'00000000'00000'00001'01111,
        0b0001'00000'00000001'00000'00001'10000,
        0b0001'00000'00000001'00000'00001'10000,
        0b0001'00001'00000001'00000'00000'10000,
        0b0001'00001'00000000'00000'00000'01111,

        0b0011'00000'00000001'00001'00010'01111, // top (+y)
        0b0011'00001'00000001'00001'00011'01111,
        0b0011'00001'00000001'00000'00011'10000,
        0b0011'00001'00000001'00000'00011'10000,
        0b0011'00000'00000001'00000'00010'10000,
        0b0011'00000'00000001'00001'00010'01111,

        0b0000'00000'00000000'00000'00001'01111, // bottom (-y)
        0b0000'00001'00000000'00000'00010'01111,
        0b0000'00001'00000000'00001'00010'10000,
        0b0000'00001'00000000'00001'00010'10000,
        0b0000'00000'00000000'00001'00001'10000,
        0b0000'00000'00000000'00000'00001'01111,
    };

    static inline constexpr unsigned int DIRT_BLOCK_DATA[] = {
    //   light  posX   posY    posZ  texX  texY
        0b0010'00001'00000000'00001'00001'01111, // right (+x)
        0b0010'00001'00000000'00000'00010'01111,
        0b0010'00001'00000001'00000'00010'10000,
        0b0010'00001'00000001'00000'00010'10000,
        0b0010'00001'00000001'00001'00001'10000,
        0b0010'00001'00000000'00001'00001'01111,

        0b0010'00000'00000000'00000'00001'01111, // left (-x)
        0b0010'00000'00000000'00001'00010'01111,
        0b0010'00000'00000001'00001'00010'10000,
        0b0010'00000'00000001'00001'00010'10000,
        0b0010'00000'00000001'00000'00001'10000,
        0b0010'00000'00000000'00000'00001'01111,

        0b0001'00000'00000000'00001'00001'01111, // front (+z)
        0b0001'00001'00000000'00001'00010'01111,
        0b0001'00001'00000001'00001'00010'10000,
        0b0001'00001'00000001'00001'00010'10000,
        0b0001'00000'00000001'00001'00001'10000,
        0b0001'00000'00000000'00001'00001'01111,

        0b0001'00001'00000000'00000'00001'01111, // back (-z)
        0b0001'00000'00000000'00000'00010'01111,
        0b0001'00000'00000001'00000'00010'10000,
        0b0001'00000'00000001'00000'00010'10000,
        0b0001'00001'00000001'00000'00001'10000,
        0b0001'00001'00000000'00000'00001'01111,

        0b0011'00000'00000001'00001'00001'01111, // top (+y)
        0b0011'00001'00000001'00001'00010'01111,
        0b0011'00001'00000001'00000'00010'10000,
        0b0011'00001'00000001'00000'00010'10000,
        0b0011'00000'00000001'00000'00001'10000,
        0b0011'00000'00000001'00001'00001'01111,

        0b0000'00000'00000000'00000'00001'01111, // bottom (-y)
        0b0000'00001'00000000'00000'00010'01111,
        0b0000'00001'00000000'00001'00010'10000,
        0b0000'00001'00000000'00001'00010'10000,
        0b0000'00000'00000000'00001'00001'10000,
        0b0000'00000'00000000'00000'00001'01111,
    };

    static inline constexpr unsigned int STONE_BLOCK_DATA[] = {
    //   light  posX   posY    posZ  texX  texY
        0b0010'00001'00000000'00001'00011'01111, // right (+x)
        0b0010'00001'00000000'00000'00100'01111,
        0b0010'00001'00000001'00000'00100'10000,
        0b0010'00001'00000001'00000'00100'10000,
        0b0010'00001'00000001'00001'00011'10000,
        0b0010'00001'00000000'00001'00011'01111,

        0b0010'00000'00000000'00000'00011'01111, // left (-x)
        0b0010'00000'00000000'00001'00100'01111,
        0b0010'00000'00000001'00001'00100'10000,
        0b0010'00000'00000001'00001'00100'10000,
        0b0010'00000'00000001'00000'00011'10000,
        0b0010'00000'00000000'00000'00011'01111,

        0b0001'00000'00000000'00001'00011'01111, // front (+z)
        0b0001'00001'00000000'00001'00100'01111,
        0b0001'00001'00000001'00001'00100'10000,
        0b0001'00001'00000001'00001'00100'10000,
        0b0001'00000'00000001'00001'00011'10000,
        0b0001'00000'00000000'00001'00011'01111,

        0b0001'00001'00000000'00000'00011'01111, // back (-z)
        0b0001'00000'00000000'00000'00100'01111,
        0b0001'00000'00000001'00000'00100'10000,
        0b0001'00000'00000001'00000'00100'10000,
        0b0001'00001'00000001'00000'00011'10000,
        0b0001'00001'00000000'00000'00011'01111,

        0b0011'00000'00000001'00001'00011'01111, // top (+y)
        0b0011'00001'00000001'00001'00100'01111,
        0b0011'00001'00000001'00000'00100'10000,
        0b0011'00001'00000001'00000'00100'10000,
        0b0011'00000'00000001'00000'00011'10000,
        0b0011'00000'00000001'00001'00011'01111,

        0b0000'00000'00000000'00000'00011'01111, // bottom (-y)
        0b0000'00001'00000000'00000'00100'01111,
        0b0000'00001'00000000'00001'00100'10000,
        0b0000'00001'00000000'00001'00100'10000,
        0b0000'00000'00000000'00001'00011'10000,
        0b0000'00000'00000000'00000'00011'01111,
    };

    static inline constexpr unsigned int BLOCK_OUTLINE_DATA[] = {
    //   light  posX   posY    posZ  texX  texY
        0b0010'00001'00000000'00001'00001'01101, // right (+x)
        0b0010'00001'00000000'00000'00010'01101,
        0b0010'00001'00000001'00000'00010'01110,
        0b0010'00001'00000001'00000'00010'01110,
        0b0010'00001'00000001'00001'00001'01110,
        0b0010'00001'00000000'00001'00001'01101,

        0b0010'00000'00000000'00000'00001'01101, // left (-x)
        0b0010'00000'00000000'00001'00010'01101,
        0b0010'00000'00000001'00001'00010'01110,
        0b0010'00000'00000001'00001'00010'01110,
        0b0010'00000'00000001'00000'00001'01110,
        0b0010'00000'00000000'00000'00001'01101,

        0b0001'00000'00000000'00001'00001'01101, // front (+z)
        0b0001'00001'00000000'00001'00010'01101,
        0b0001'00001'00000001'00001'00010'01110,
        0b0001'00001'00000001'00001'00010'01110,
        0b0001'00000'00000001'00001'00001'01110,
        0b0001'00000'00000000'00001'00001'01101,

        0b0001'00001'00000000'00000'00001'01101, // back (-z)
        0b0001'00000'00000000'00000'00010'01101,
        0b0001'00000'00000001'00000'00010'01110,
        0b0001'00000'00000001'00000'00010'01110,
        0b0001'00001'00000001'00000'00001'01110,
        0b0001'00001'00000000'00000'00001'01101,

        0b0011'00000'00000001'00001'00001'01101, // top (+y)
        0b0011'00001'00000001'00001'00010'01101,
        0b0011'00001'00000001'00000'00010'01110,
        0b0011'00001'00000001'00000'00010'01110,
        0b0011'00000'00000001'00000'00001'01110,
        0b0011'00000'00000001'00001'00001'01101,

        0b0000'00000'00000000'00000'00001'01101, // bottom (-y)
        0b0000'00001'00000000'00000'00010'01101,
        0b0000'00001'00000000'00001'00010'01110,
        0b0000'00001'00000000'00001'00010'01110,
        0b0000'00000'00000000'00001'00001'01110,
        0b0000'00000'00000000'00000'00001'01101,
    };

    void getFaceData(BlockType type, int x, int y, int z, unsigned int* data, Direction face) {
        assert(face >= 0 && face < 6);
        int offset = UINTS_PER_FACE * (int) face;
        switch (type) {
            case BlockType::GRASS:         std::memcpy(data, GRASS_BLOCK_DATA + offset, BYTES_PER_FACE); break;
            case BlockType::DIRT:          std::memcpy(data, DIRT_BLOCK_DATA + offset, BYTES_PER_FACE); break;
            case BlockType::STONE:         std::memcpy(data, STONE_BLOCK_DATA + offset, BYTES_PER_FACE); break;
            case BlockType::BLOCK_OUTLINE: std::memcpy(data, BLOCK_OUTLINE_DATA + offset, BYTES_PER_FACE); break;
            default:
                assert(0 && "Invalid type / No data for this block");
                std::exit(-1);
        }
        for (int i = 0; i < UINTS_PER_FACE; ++i) {
            data[i] += (x << 23) + (y << 15) + (z << 10);
        }
    }

    void getBlockData(BlockType type, int x, int y, int z, unsigned int* data) {
        getFaceData(type, x, y, z, data, PLUS_X); data += UINTS_PER_FACE;
        getFaceData(type, x, y, z, data, MINUS_X); data += UINTS_PER_FACE;
        getFaceData(type, x, y, z, data, PLUS_Z); data += UINTS_PER_FACE;
        getFaceData(type, x, y, z, data, MINUS_Z); data += UINTS_PER_FACE;
        getFaceData(type, x, y, z, data, PLUS_Y); data += UINTS_PER_FACE;
        getFaceData(type, x, y, z, data, MINUS_Y);
    }

    sglm::vec3 getPosition(unsigned int vertex) {
        unsigned int x = (vertex >> 23) & 0x1F;
        unsigned int y = (vertex >> 15) & 0xFF;
        unsigned int z = (vertex >> 10) & 0x1F;
        return { (float) x, (float) y, (float) z };
    };

    bool isTransparent(BlockType type) {
        return type == BlockType::AIR;
    }

}
